# kanienkeha_conjugator_cstem.py
#   Akwesasne Dialect
# Script to auto-generate rich morphemes for the verb root "nòn:we’s" ("to like") using subject-object logic
# nòn:we’s is a C Stem Kanien’kéha Phrase with non-literal English explanation ’to like’
# Generate Kanien’kéha C Stem Conjugations.
#
# Author: 
#   MoniGarr (Monica Peters), monigarr@MoniGarr.com
#
# This repository supports language revival & retention for
#     Polysynthetic, Low-Resource Indigenous Languages that
#       might lack industry standard language ISO codes.
#
# License: Apache 2.0
# 
# For technical consulting, collaboration, or mentorship on Indigenous
# Language Revival & Retention Tech Solutions (AI, XR, 3D, Cultural Protocols)
# contact:
#   MoniGarr (Monica Peters) – monigarr@monigarr.com
#   Founder of MoniGarr.com LLC and MohawkLanguage.ca
#   Akwesasne-based Onkwehonwe (Indigenous, Kanien’kéhake, Mohawk of Akwesasne)
#   https://www.linkedin.com/in/3dtechartist
#
# ============================================================================
# This script is scaffolded to:
# Generate extended conjugations of nòn:we’s
# Map subject→object pairs with gloss tags
# Output a structured morphemes.json file
# Automatically produce >9 conjugations (15+ entries now, easily expandable)
# 
# TODO:
# Expand Pair Matrix: Add more subject-object pairs (plural forms, inclusive/exclusive, gender distinctions).
# Validate with Verified Community Connected Accepted Fluent Speakers: 
#     Auto-gen entries marked "validation_status": "needs_validation" — ideal for feedback rounds.
# Integrate into Pipeline:
#   Append these to your tokenizer training corpus.
#   Visualize gloss alignment (e.g., in a notebook or web interface).
#   Use this dataset to pretrain a morpheme-aware LM head for Akwesasne dialect.


import json
import yaml
from pathlib import Path

# Load stem rules and matrix
with open("/GitHub/mini-indig-llm-kit/datasets/kanienkeha_vocab_rules.yaml", "r", encoding="utf-8") as f:
    vocab_rules = yaml.safe_load(f)

# SUBJECT → OBJECT matrix with prefix forms
# This can be extended manually or autogenerated from lookup tables
subject_object_pairs = [
    {"subject": "I", "object": "you", "prefix": "khe", "gloss": ["1SG", "2SG"]},
    {"subject": "I", "object": "her", "prefix": "khe", "gloss": ["1SG", "3SG.F"]},
    {"subject": "I", "object": "him", "prefix": "ri", "gloss": ["1SG", "3SG.M"]},
    {"subject": "you", "object": "me", "prefix": "tsi", "gloss": ["2SG", "1SG"]},
    {"subject": "he", "object": "her", "prefix": "sha", "gloss": ["3SG.M", "3SG.F"]},
    {"subject": "he", "object": "him", "prefix": "ro", "gloss": ["3SG.M", "3SG.M"]},
    {"subject": "she", "object": "him", "prefix": "ronwa", "gloss": ["3SG.F", "3SG.M"]},
    {"subject": "she", "object": "her", "prefix": "ionta", "gloss": ["3SG.F", "3SG.F"]},
    {"subject": "it", "object": "me", "prefix": "wake", "gloss": ["3SG.INAN", "1SG"]},
    {"subject": "it", "object": "you", "prefix": "sa", "gloss": ["3SG.INAN", "2SG"]},
    {"subject": "I", "object": "it", "prefix": "ke", "gloss": ["1SG", "3SG.INAN"]},
    {"subject": "he", "object": "it", "prefix": "ro", "gloss": ["3SG.M", "3SG.INAN"]},
    {"subject": "she", "object": "it", "prefix": "iako", "gloss": ["3SG.F", "3SG.INAN"]},
    {"subject": "we", "object": "them", "prefix": "ionkwa", "gloss": ["1PL", "3PL"]},
    {"subject": "they", "object": "us", "prefix": "ronkwa", "gloss": ["3PL", "1PL"]},
]

root_verb = vocab_rules.get("root_verb", "nòn:we’s")
stem_type = "CStem"  # Manually set for now

morpheme_entries = []

for idx, pair in enumerate(subject_object_pairs, start=1):
    full_form = f"{pair['prefix']}{root_verb}"
    morpheme_entries.append({
        "id": f"{idx:03}",
        "dialect": "Eastern",
        "speaker_id": "auto_generated",
        "speaker_role": "automated_model",
        "source": "subject_object_matrix",
        "input_text": full_form,
        "translation": f"{pair['subject']} likes {pair['object']}",
        "morpheme_gloss": [pair['prefix'], root_verb],
        "morpheme_tags": pair['gloss'] + ["like"],
        "stem_type": stem_type,
        "category": "blue",
        "notes": f"Auto-generated based on pronoun pair: {pair['subject']}→{pair['object']}",
        "usage_context": "generated corpus expansion",
        "validation_status": "needs_validation",
        "tokenized": False
    })

# Write to morphemes.json
Path("output").mkdir(exist_ok=True)
with open("/GitHub/mini-indig-llm-kit/datasets/generated/conjugated_cstem_morphemes.json", "w", encoding="utf-8") as f:
    json.dump(morpheme_entries, f, ensure_ascii=False, indent=2)

print(f"✅ Generated {len(morpheme_entries)} conjugations → datasets/generated/conjugated_cstem_morphemes.json")
